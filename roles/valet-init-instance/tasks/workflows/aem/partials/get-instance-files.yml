##
#   Copyright 2023 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- name: "workflows » aem » partials » get-instance-files | check if aem target version '{{ valet_sh_aem_sdk_target_version }}' is in cache"
  stat:
    path: "{{ valet_sh_aem_sdk_local_cache_dir }}/aem-sdk-{{ valet_sh_aem_sdk_target_version }}.zip"
  register: aem_target_version_cache_file_obj

- block:
  - name: "workflows » aem » partials » get-instance-files | register hub host"
    add_host:
      hostname: hub
      ansible_host: "{{ valet_sh_hub_host }}"
      ansible_port: "{{ valet_sh_hub_port }}"
      ansible_user: "{{ valet_sh_hub_user }}"
      ansible_python_interpreter: /usr/bin/python3
      ansible_ssh_pipelining: 1

  - name: "workflows » aem » partials » get-instance-files | get ssh fingerprint for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}'"
    shell: "ssh-keyscan -tecdsa -p {{ valet_sh_hub_port|string }} {{ valet_sh_hub_host }}"
    register: valet_sh_hub_host_ssh_fingerprint_obj

  - name: "workflows » aem » partials » get-instance-files | set known_host hash field name'"
    set_fact:
      valet_sh_known_host_hashed_name: "[{{ valet_sh_hub_host }}]:{{ valet_sh_hub_port|string }}"
    when: valet_sh_hub_port != 22 or valet_sh_hub_port != "22"

  - name: "workflows » aem » partials » get-instance-files | set known_host hash field name'"
    set_fact:
      valet_sh_known_host_hashed_name: "{{ valet_sh_hub_host }}"
    when: valet_sh_hub_port == 22 or valet_sh_hub_port == "22"

  - name: "workflows » aem » project-setup | ensure ssh-key for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}' is in known_hosts"
    known_hosts:
      name: "{{ valet_sh_known_host_hashed_name }}"
      key: "{{ valet_sh_hub_host_ssh_fingerprint_obj.stdout }}"
      path: "~/.ssh/known_hosts"
      state: present

  - name: "workflows » aem » partials » get-instance-files | check if '{{ aem_sdk_hub_path }}//aem-sdk-{{ valet_sh_aem_sdk_target_version }}.zip' is available on hub"
    stat:
      path: "{{ aem_sdk_hub_path }}/aem-sdk-{{ valet_sh_aem_sdk_target_version }}.zip"
    register: aem_target_version_remote_file_obj
    delegate_to: hub

  - name: "workflows » aem » partials » get-instance-files | fail when 'aem-sdk-{{ valet_sh_aem_sdk_target_version }}.zip' was not found on hub"
    fail:
      msg: "AEM target version '{{ valet_sh_aem_sdk_target_version }}' is not available!"
    when: not aem_target_version_remote_file_obj.stat.exists

  - name: "workflows » aem » partials » get-instance-files | synchronize aem release 'aem-sdk-{{ valet_sh_aem_sdk_target_version }}.zip'"
    shell: "rsync -aL -e 'ssh -p {{ valet_sh_hub_port }}' {{ valet_sh_hub_user }}@{{ valet_sh_hub_host }}:{{ aem_sdk_hub_path }}/aem-sdk-{{ valet_sh_aem_sdk_target_version }}.zip {{ valet_sh_aem_sdk_local_cache_dir }}/aem-sdk-{{ valet_sh_aem_sdk_target_version }}.zip" # noqa 204
  when: not aem_target_version_cache_file_obj.stat.exists|bool
