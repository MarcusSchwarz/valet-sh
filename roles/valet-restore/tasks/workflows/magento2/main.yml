#   Copyright 2020 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- include_vars: "vars.yml"

- include_tasks: "check-vars.yml"

- name: "workflows » magento2 | register hub host"
  add_host:
    hostname: hub
    ansible_host: "{{ valet_sh_hub_host }}"
    ansible_port: "{{ valet_sh_hub_port }}"
    ansible_user: "{{ valet_sh_hub_user }}"
    ansible_ssh_pipelining: 1

- name: "workflows » magento2 | get ssh fingerprint for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}'"
  shell: "ssh-keyscan -tecdsa -p {{ valet_sh_hub_port|string }} {{ valet_sh_hub_host }}"
  register: valet_sh_hub_host_ssh_fingerprint_obj

- name: "workflows » magento2 | ensure ssh-key for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}' is in known_hosts"
  known_hosts:
    name: "[{{ valet_sh_hub_host }}]:{{ valet_sh_hub_port|string }}"
    key: "{{ valet_sh_hub_host_ssh_fingerprint_obj.stdout }}"
    path: "~/.ssh/known_hosts"
    state: present

- name: "workflows » magento2 | check if instancebackup idenfifier '{{ valet_instancebackup_identifier }}'"
  stat:
    path: "{{ valet_sh_project_vars.hub.path }}/auto/db/{{ valet_instancebackup_identifier }}"
  register: instancebackup_identifier_target_obj
  delegate_to: hub

- name: "workflows » magento2 | fail when instance identifier does not exist"
  fail:
    msg: "Instance-Backup identifier '{{ valet_instancebackup_identifier }}' does not exist!"
  when: not instancebackup_identifier_target_obj.stat.exists

- name: "workflows » magento2 | check if instancebackup idenfifier '{{ valet_sh_instance_db_filename }}'"
  stat:
    path: "{{ valet_sh_project_vars.hub.path }}/auto/db/{{ valet_instancebackup_identifier }}/{{ valet_sh_instance_db_filename }}"
  register: instancebackup_target_db_file_obj
  delegate_to: hub

- name: "workflows » magento2 | fail when db dump '{{ valet_sh_instance_db_filename }}' does not exist"
  fail:
    msg: "file '{{ valet_sh_instance_db_filename }}' does not exist!"
  when: not instancebackup_target_db_file_obj.stat.exists

- name: "@vsh downloading '{{ valet_sh_instance_db_filename }}'..."
  debug:

- name: "workflows » magento2 | synchronize db dump {{ valet_instancebackup_identifier }}/{{ valet_sh_instance_db_filename }}"
  shell: "rsync -aL -e 'ssh -p {{ valet_sh_hub_port }}' {{ valet_sh_hub_user }}@{{ valet_sh_hub_host }}:{{ valet_sh_project_vars.hub.path }}/auto/db/{{ valet_instancebackup_identifier }}/{{ valet_sh_instance_db_filename }} {{ current_tmp_dir }}" # noqa 204
  tags:
  - skip_ansible_lint

- name: "workflows » magento2 | drop database '{{ valet_sh_project_database_name }}'"
  mysql_db:
    name: "{{ valet_sh_project_database_name }}"
    config_file: "{{ valet_sh_project_mysql_client_configuration }}"
    login_host: "127.0.0.1"
    login_port: "{{ valet_sh_project_mysql_server_port }}"
    state: absent

- name: "@vsh importing '{{ valet_sh_instance_db_filename }}' into database '{{ valet_sh_project_database_name }}'"
  debug:

- name: "workflows » magento2 | import db dump '{{ valet_sh_instance_db_filename }}' into database '{{ valet_sh_project_database_name }}'"
  mysql_db:
    name: "{{ valet_sh_project_database_name }}"
    target: "{{ current_tmp_dir }}/{{ valet_sh_instance_db_filename }}"
    config_file: "{{ valet_sh_project_mysql_client_configuration }}"
    login_host: "127.0.0.1"
    login_port: "{{ valet_sh_project_mysql_server_port }}"
    encoding: "utf8"
    state: import

- name: "@vsh import of '{{ valet_sh_instance_db_filename }}' into database '{{ valet_sh_project_database_name }}' successfully finished"
  debug:

- name: "@vsh synchronizing filesystem..."
  debug:

- name: "workflows » magento2 | synchronize filesystem"
  shell: "rsync -aL -e 'ssh -p {{ valet_sh_hub_port }}' {{ valet_sh_hub_user }}@{{ valet_sh_hub_host }}:{{ valet_sh_project_vars.hub.path }}/auto/fs/{{ valet_instancebackup_identifier }}/{{ valet_sh_restore_current_fs }}/ {{ valet_current_path }}/{{ valet_project_src_dir }}/{{ valet_sh_restore_current_fs }}/" # noqa 204
  with_items: "{{ valet_sh_project_vars.instance.sync.fs }}"
  when:
    - valet_sh_project_vars.instance is defined
    - valet_sh_project_vars.instance.sync is defined
    - valet_sh_project_vars.instance.sync.fs is defined
  loop_control:
    loop_var: valet_sh_restore_current_fs
  tags:
  - skip_ansible_lint

- name: "@vsh synchronizing filesystem finished..."
  debug:

- name: "@vsh run post restore commands"
  debug:

- name: "workflows » magento2 | run post restore commands"
  shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/{{ valet_sh_restore_current_post_command }}"
  with_items: "{{ valet_restore_post_restore_commands }}"
  loop_control:
    loop_var: valet_sh_restore_current_post_command
  tags:
  - skip_ansible_lint

- block:
  - name: "workflows » magento2 | run full reindex when defined in .valet-sh.yml"
    shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/bin/magento indexer:reindex"
    when:
      - valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindexAll is defined
      - valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindexAll|bool

  - name: "workflows » magento2 | run custom indexer commands defined in .valet-sh.yml"
    shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/bin/magento indexer:reindex {{ valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindex | join(' ') }}"
    when:
      - valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindex is defined
      - valet_sh_project_vars.instance.sync.post_restore_actions.indexer.reindex
  when:
    - valet_sh_project_vars.instance is defined
    - valet_sh_project_vars.instance.sync is defined
    - valet_sh_project_vars.instance.sync.post_restore_actions is defined
    - valet_sh_project_vars.instance.sync.post_restore_actions.indexer is defined
