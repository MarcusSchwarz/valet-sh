#   Copyright 2021 TechDivision GmbH
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
##
---

- include_vars: "vars.yml"

- include_tasks: "check-vars.yml"

- name: "workflows » neos | register hub host"
  add_host:
    hostname: hub
    ansible_host: "{{ valet_sh_hub_host }}"
    ansible_port: "{{ valet_sh_hub_port }}"
    ansible_user: "{{ valet_sh_hub_user }}"
    ansible_ssh_pipelining: 1

- name: "workflows » neos | get ssh fingerprint for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}'"
  shell: "ssh-keyscan -tecdsa -p {{ valet_sh_hub_port|string }} {{ valet_sh_hub_host }}"
  register: valet_sh_hub_host_ssh_fingerprint_obj

- name: "workflows » neos | set known_host hash field name'"
  set_fact:
    valet_sh_known_host_hashed_name: "[{{ valet_sh_hub_host }}]:{{ valet_sh_hub_port|string }}"
  when: valet_sh_hub_port != 22 or valet_sh_hub_port != "22"

- name: "workflows » neos | set known_host hash field name'"
  set_fact:
    valet_sh_known_host_hashed_name: "{{ valet_sh_hub_host }}"
  when: valet_sh_hub_port == 22 or valet_sh_hub_port == "22"

- name: "workflows » neos | ensure ssh-key for '{{ valet_sh_hub_host }}:{{ valet_sh_hub_port }}' is in known_hosts"
  known_hosts:
    name: "{{ valet_sh_known_host_hashed_name }}"
    key: "{{ valet_sh_hub_host_ssh_fingerprint_obj.stdout }}"
    path: "~/.ssh/known_hosts"
    state: present

- name: "workflows » neos | check if instancebackup idenfifier '{{ valet_instancebackup_identifier }}'"
  stat:
    path: "{{ valet_sh_project_vars.hub.path }}/{{ valet_instancebackup_identifier }}/db/"
  register: instancebackup_identifier_target_obj
  delegate_to: hub

- name: "workflows » neos | fail when instance identifier does not exist"
  fail:
    msg: "Instance-Backup identifier '{{ valet_instancebackup_identifier }}' does not exist!"
  when: not instancebackup_identifier_target_obj.stat.exists

- name: "workflows » neos | check if instancebackup idenfifier '{{ valet_sh_instance_db_filename }}'"
  stat:
    path: "{{ valet_sh_project_vars.hub.path }}/{{ valet_instancebackup_identifier }}/db/{{ valet_sh_instance_db_filename }}"
  register: instancebackup_target_db_file_obj
  delegate_to: hub

- name: "workflows » neos | fail when db dump '{{ valet_sh_instance_db_filename }}' does not exist"
  fail:
    msg: "file '{{ valet_sh_instance_db_filename }}' does not exist!"
  when: not instancebackup_target_db_file_obj.stat.exists

- name: "workflows » neos | synchronize db dump {{ valet_instancebackup_identifier }}/{{ valet_sh_instance_db_filename }}"
  shell: "rsync -aL -e 'ssh -p {{ valet_sh_hub_port }}' {{ valet_sh_hub_user }}@{{ valet_sh_hub_host }}:{{ valet_sh_project_vars.hub.path }}/{{ valet_instancebackup_identifier }}/db/{{ valet_sh_instance_db_filename }} {{ current_tmp_dir }}" # noqa 204
  tags:
  - skip_ansible_lint

- name: "workflows » neos | drop database '{{ valet_sh_project_database_name }}'"
  mysql_db:
    name: "{{ valet_sh_project_database_name }}"
    config_file: "{{ valet_sh_project_mysql_client_configuration }}"
    login_host: "127.0.0.1"
    login_port: "{{ valet_sh_project_mysql_server_port }}"
    state: absent

- name: "workflows » neos | import db dump '{{ valet_sh_instance_db_filename }}' into database '{{ valet_sh_project_database_name }}'"
  mysql_db:
    name: "{{ valet_sh_project_database_name }}"
    target: "{{ current_tmp_dir }}/{{ valet_sh_instance_db_filename }}"
    config_file: "{{ valet_sh_project_mysql_client_configuration }}"
    login_host: "127.0.0.1"
    login_port: "{{ valet_sh_project_mysql_server_port }}"
    encoding: "utf8mb4"
    collation: "utf8mb4_unicode_ci"
    state: import

- name: "workflows » neos | ensure directories existing"
  file:
    path: "{{ valet_current_path }}/{{ valet_project_src_dir }}/{{ valet_sh_restore_current_fs_prepare }}"
    state: directory
  with_items: "{{ valet_sh_project_vars.instance.sync.fs }}"
  when:
    - valet_sh_project_vars.instance is defined
    - valet_sh_project_vars.instance.sync is defined
    - valet_sh_project_vars.instance.sync.fs is defined
  loop_control:
    loop_var: valet_sh_restore_current_fs_prepare
  tags:
  - skip_ansible_lint

- name: "workflows » neos | synchronize filesystem"
  shell: "rsync -aL -e 'ssh -p {{ valet_sh_hub_port }}' {{ valet_sh_hub_user }}@{{ valet_sh_hub_host }}:{{ valet_sh_project_vars.hub.path }}/{{ valet_instancebackup_identifier }}/fs/{{ valet_sh_restore_current_fs }}/ {{ valet_current_path }}/{{ valet_project_src_dir }}/{{ valet_sh_restore_current_fs }}/" # noqa 204
  with_items: "{{ valet_sh_project_vars.instance.sync.fs }}"
  when:
    - valet_sh_project_vars.instance is defined
    - valet_sh_project_vars.instance.sync is defined
    - valet_sh_project_vars.instance.sync.fs is defined
  loop_control:
    loop_var: valet_sh_restore_current_fs
  tags:
  - skip_ansible_lint

- name: "workflows » neos | delete old domains when 'multi_domain' setting is present in .valet-sh.yml"
  shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/flow domain:delete '*'"
  when:
    - valet_sh_project_vars.instance is defined
    - valet_sh_project_vars.instance.multi_domain is defined

- name: "workflows » neos | set dev domains in neos"
  shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/flow domain:add {{ valet_sh_multi_domain_item.key }} {{ valet_sh_multi_domain_item.value }}.{{ valet_sh_project_vars.instance.key }}.{{ development_tld }}"
  when:
    - valet_sh_project_vars.instance is defined
    - valet_sh_project_vars.instance.multi_domain is defined
  with_dict: "{{ valet_sh_project_vars.instance.multi_domain }}"
  loop_control:
    loop_var: valet_sh_multi_domain_item

- name: "workflows » neos | run post restore commands"
  shell: "{{ php_bin }} {{ valet_current_path }}/{{ valet_project_src_dir }}/{{ valet_sh_restore_current_post_command }}"
  with_items: "{{ valet_restore_post_restore_commands }}"
  loop_control:
    loop_var: valet_sh_restore_current_post_command
  tags:
  - skip_ansible_lint
